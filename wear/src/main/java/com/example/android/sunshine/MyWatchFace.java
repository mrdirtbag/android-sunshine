package com.example.android.sunshine;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.wearable.watchface.CanvasWatchFaceService;
import android.support.wearable.watchface.WatchFaceStyle;
import android.view.SurfaceHolder;
import android.view.WindowInsets;
import android.widget.Toast;

import java.lang.ref.WeakReference;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

/**
 * Watchface for Sunshine.  Started with default watchface code generated by Android Studio.
 */
public class MyWatchFace extends CanvasWatchFaceService {
    private static final Typeface NORMAL_TYPEFACE =
            Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL);
    private static final Typeface BOLD_TYPEFACE =
            Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD);

    /**
     * Update rate in milliseconds for interactive mode. We update once a minute since minutes are
     * displayed in interactive mode.
     */
    private static final long INTERACTIVE_UPDATE_RATE_MS = TimeUnit.MINUTES.toMillis(1);

    /**
     * Handler message id for updating the time periodically in interactive mode.
     */
    private static final int MSG_UPDATE_TIME = 0;

    /**
     * Date formatter for display of date on watchface
     */
    private static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("EEE, MMM d, yyyy");

    public static String HIGH = "64" + (char) 0x00B0;
    public static String LOW = "55" + (char) 0x00B0;
    private static Bitmap WEATHER_BITMAP;
    private static boolean WEATHER_IMAGE_CHANGED = true;

    public static final float TIME_PERCENT_Y_OFFSET = 0.70f;
    public static final float DATE_PERCENT_Y_OFFSET = 0.90f;

    public static final float LINE_LENGHT_PERCENT = 0.16f;

    public static final float WEATHER_PERCENT_X_OFFSET = 0.75f;
    public static final float WEATHER_PERCENT_Y_OFFSET = 1.4f;
    public static final float WEATHER_IMAGE_PERCENT_Y_OFFSET = 1.09f;

    public static void setWeatherImage(Bitmap weatherBttmap) {
        WEATHER_BITMAP = weatherBttmap;
        WEATHER_IMAGE_CHANGED = true;
    }

    @Override
    public Engine onCreateEngine() {
        return new Engine();
    }

    private static class EngineHandler extends Handler {
        private final WeakReference<MyWatchFace.Engine> mWeakReference;

        public EngineHandler(MyWatchFace.Engine reference) {
            mWeakReference = new WeakReference<>(reference);
        }

        @Override
        public void handleMessage(Message msg) {
            MyWatchFace.Engine engine = mWeakReference.get();
            if (engine != null) {
                switch (msg.what) {
                    case MSG_UPDATE_TIME:
                        engine.handleUpdateTimeMessage();
                        break;
                }
            }
        }
    }

    private class Engine extends CanvasWatchFaceService.Engine {
        final Handler mUpdateTimeHandler = new EngineHandler(this);
        boolean mRegisteredTimeZoneReceiver = false;
        Paint mBackgroundPaint;
        Paint mTextBoldPaint;
        Paint mTextLightPaint;
        Paint mTextDegreeBoldPaint;
        Paint mTextDegreeLightPaint;
        Paint mPaintLine;
        boolean mAmbient;
        Calendar mCalendar;
        final BroadcastReceiver mTimeZoneReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                mCalendar.setTimeZone(TimeZone.getDefault());
                invalidate();
            }
        };

        /**
         * Whether the display supports fewer bits for each color in ambient mode. When true, we
         * disable anti-aliasing in ambient mode.
         */
        boolean mLowBitAmbient;

        @Override
        public void onCreate(SurfaceHolder holder) {
            super.onCreate(holder);

            setWatchFaceStyle(new WatchFaceStyle.Builder(MyWatchFace.this)
                    .setCardPeekMode(WatchFaceStyle.PEEK_MODE_VARIABLE)
                    .setBackgroundVisibility(WatchFaceStyle.BACKGROUND_VISIBILITY_INTERRUPTIVE)
                    .setShowSystemUiTime(false)
                    .setAcceptsTapEvents(true)
                    .build());
            Resources resources = MyWatchFace.this.getResources();

            mBackgroundPaint = createTextPaint(resources.getColor(R.color.background));

            mTextBoldPaint = createTextPaint(resources.getColor(R.color.digital_text));
            mTextBoldPaint.setTypeface(BOLD_TYPEFACE);
            mTextLightPaint = createTextPaint(resources.getColor(R.color.light_text));

            mTextDegreeBoldPaint = createTextPaint(resources.getColor(R.color.digital_text));
            mTextDegreeBoldPaint.setTypeface(BOLD_TYPEFACE);
            mTextDegreeLightPaint = createTextPaint(resources.getColor(R.color.light_text));


            mPaintLine = new Paint();
            mPaintLine.setColor(resources.getColor(R.color.dividing_line));

            WEATHER_BITMAP = BitmapFactory.decodeResource(resources, R.drawable.ic_clear);

            mCalendar = Calendar.getInstance();
        }

        @Override
        public void onDestroy() {
            mUpdateTimeHandler.removeMessages(MSG_UPDATE_TIME);
            super.onDestroy();
        }

        private Paint createTextPaint(int textColor) {
            Paint paint = new Paint();
            paint.setColor(textColor);
            paint.setTypeface(NORMAL_TYPEFACE);
            paint.setAntiAlias(true);
            return paint;
        }

        @Override
        public void onVisibilityChanged(boolean visible) {
            super.onVisibilityChanged(visible);

            if (visible) {
                registerReceiver();

                // Update time zone in case it changed while we weren't visible.
                mCalendar.setTimeZone(TimeZone.getDefault());
                invalidate();
            } else {
                unregisterReceiver();
            }

            // Whether the timer should be running depends on whether we're visible (as well as
            // whether we're in ambient mode), so we may need to start or stop the timer.
            updateTimer();
        }

        private void registerReceiver() {
            if (mRegisteredTimeZoneReceiver) {
                return;
            }
            mRegisteredTimeZoneReceiver = true;
            IntentFilter filter = new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED);
            MyWatchFace.this.registerReceiver(mTimeZoneReceiver, filter);
        }

        private void unregisterReceiver() {
            if (!mRegisteredTimeZoneReceiver) {
                return;
            }
            mRegisteredTimeZoneReceiver = false;
            MyWatchFace.this.unregisterReceiver(mTimeZoneReceiver);
        }

        @Override
        public void onApplyWindowInsets(WindowInsets insets) {
            super.onApplyWindowInsets(insets);

            Resources resources = MyWatchFace.this.getResources();
            float textSize = resources.getDimension(R.dimen.digital_text_size);
            float dateTextSize = resources.getDimension(R.dimen.date_text_size);
            float weatherTextSize = resources.getDimension(R.dimen.weather_text_size);

            mBackgroundPaint.setTextSize(textSize);
            mTextBoldPaint.setTextSize(textSize);
            mTextLightPaint.setTextSize(dateTextSize);
            mTextDegreeBoldPaint.setTextSize(weatherTextSize);
            mTextDegreeLightPaint.setTextSize(weatherTextSize);
        }

        @Override
        public void onPropertiesChanged(Bundle properties) {
            super.onPropertiesChanged(properties);
            mLowBitAmbient = properties.getBoolean(PROPERTY_LOW_BIT_AMBIENT, false);
        }

        @Override
        public void onTimeTick() {
            super.onTimeTick();
            invalidate();
        }

        @Override
        public void onAmbientModeChanged(boolean inAmbientMode) {
            super.onAmbientModeChanged(inAmbientMode);
            if (mAmbient != inAmbientMode) {
                mAmbient = inAmbientMode;
                if (mLowBitAmbient) {
                    mBackgroundPaint.setAntiAlias(!inAmbientMode);
                    mTextBoldPaint.setAntiAlias(!inAmbientMode);
                    mTextLightPaint.setAntiAlias(!inAmbientMode);
                    mTextDegreeBoldPaint.setAntiAlias(!inAmbientMode);
                    mTextDegreeLightPaint.setAntiAlias(!inAmbientMode);
                }
                invalidate();
            }

            // Whether the timer should be running depends on whether we're visible (as well as
            // whether we're in ambient mode), so we may need to start or stop the timer.
            updateTimer();
        }


        @Override
        public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            super.onSurfaceChanged(holder, format, width, height);

            if(WEATHER_IMAGE_CHANGED) {
                scaleBitmap(width,height);
            }

        }

        /**
         *  Scale loaded weather image to adjust for screen density.
         *  This method should only be called when a nwe image has loaded,
         */
        public void scaleBitmap(int width, int height) {
            WEATHER_BITMAP = Bitmap.createScaledBitmap(WEATHER_BITMAP,
                    (int) (width * 0.20f),
                    (int) (height * 0.20f), true);
            WEATHER_IMAGE_CHANGED = false;
        }

        @Override
        public void onDraw(Canvas canvas, Rect bounds) {
            // Draw the background.
            if (isInAmbientMode()) {
                canvas.drawColor(Color.BLACK);
            } else {
                canvas.drawRect(0, 0, bounds.width(), bounds.height(), mBackgroundPaint);
            }

            // Draw H:MM in ambient mode or H:MM:SS in interactive mode.
            long now = System.currentTimeMillis();
            mCalendar.setTimeInMillis(now);

            String timeText =  String.format("%d:%02d", mCalendar.get(Calendar.HOUR),
                    mCalendar.get(Calendar.MINUTE));

            Rect textBounds = new Rect();

            if(mAmbient) {
                mBackgroundPaint.getTextBounds(timeText, 0, timeText.length(), textBounds);
                canvas.drawText(timeText,
                        bounds.centerX() - textBounds.centerX(),
                        bounds.centerY() * TIME_PERCENT_Y_OFFSET,
                        mBackgroundPaint);
            } else {
                // draw time
                mTextBoldPaint.getTextBounds(timeText, 0, timeText.length(), textBounds);
                canvas.drawText(timeText,
                        bounds.centerX() - textBounds.centerX(),
                        bounds.centerY() * TIME_PERCENT_Y_OFFSET, mTextBoldPaint);

                // draw date info
                String dateText = DATE_FORMATTER.format(mCalendar.getTime());
                mTextLightPaint.getTextBounds(dateText, 0, dateText.length(), textBounds);
                canvas.drawText(dateText.toUpperCase(),
                        bounds.centerX() - textBounds.centerX(),
                        bounds.centerY() * DATE_PERCENT_Y_OFFSET, mTextLightPaint);

                // draw dividing line
                canvas.drawLine(bounds.centerX() - (bounds.width() * LINE_LENGHT_PERCENT),
                        bounds.centerY(),
                        bounds.centerX() + (bounds.width() * LINE_LENGHT_PERCENT),
                        bounds.centerY(), mPaintLine);

                // draw weather info
                mTextDegreeBoldPaint.getTextBounds(HIGH, 0, HIGH.length(), textBounds);
                canvas.drawText(HIGH,
                        bounds.centerX() - textBounds.centerX(),
                        bounds.centerY() * WEATHER_PERCENT_Y_OFFSET,
                        mTextDegreeBoldPaint);
                canvas.drawText(LOW,
                        bounds.centerX() + (textBounds.width() * WEATHER_PERCENT_X_OFFSET),
                        bounds.centerY() * WEATHER_PERCENT_Y_OFFSET,
                        mTextDegreeLightPaint);

                // check to see if we have new image, if new scale it.
                if(WEATHER_IMAGE_CHANGED) {
                    scaleBitmap(bounds.width(),bounds.height());
                }

                canvas.drawBitmap(WEATHER_BITMAP,
                        bounds.centerX() - (textBounds.width() * WEATHER_PERCENT_X_OFFSET) - WEATHER_BITMAP.getWidth(),
                        bounds.centerY() * WEATHER_IMAGE_PERCENT_Y_OFFSET,
                        mBackgroundPaint);
            }
        }
        /**
         * Starts the {@link #mUpdateTimeHandler} timer if it should be running and isn't currently
         * or stops it if it shouldn't be running but currently is.
         */
        private void updateTimer() {
            mUpdateTimeHandler.removeMessages(MSG_UPDATE_TIME);
            if (shouldTimerBeRunning()) {
                mUpdateTimeHandler.sendEmptyMessage(MSG_UPDATE_TIME);
            }
        }

        /**
         * Returns whether the {@link #mUpdateTimeHandler} timer should be running. The timer should
         * only run when we're visible and in interactive mode.
         */
        private boolean shouldTimerBeRunning() {
            return isVisible() && !isInAmbientMode();
        }

        /**
         * Handle updating the time periodically in interactive mode.
         */
        private void handleUpdateTimeMessage() {
            invalidate();
            if (shouldTimerBeRunning()) {
                long timeMs = System.currentTimeMillis();
                long delayMs = INTERACTIVE_UPDATE_RATE_MS
                        - (timeMs % INTERACTIVE_UPDATE_RATE_MS);
                mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME, delayMs);
            }
        }
    }
}
